// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "BlankInputDevicePlugin/Private/BlankInputDevicePluginPrivatePCH.h"
#include "BlankInputDevicePlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeBlankInputDevicePlugin() {}
static class UEnum* EHIDReadResult_StaticEnum()
{
	extern BLANKINPUTDEVICEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern BLANKINPUTDEVICEPLUGIN_API class UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult();
		Singleton = GetStaticEnum(Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult, Z_Construct_UPackage__Script_BlankInputDevicePlugin(), TEXT("EHIDReadResult"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHIDReadResult(EHIDReadResult_StaticEnum, TEXT("/Script/BlankInputDevicePlugin"), TEXT("EHIDReadResult"), false, nullptr, nullptr);
	void UHidDevice::StaticRegisterNativesUHidDevice()
	{
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "CloseDevice",(Native)&UHidDevice::execCloseDevice);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "GetManufacturerString",(Native)&UHidDevice::execGetManufacturerString);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "GetProductString",(Native)&UHidDevice::execGetProductString);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "GetSerialNumberString",(Native)&UHidDevice::execGetSerialNumberString);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "GetStringByIndex",(Native)&UHidDevice::execGetStringByIndex);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "IsValid",(Native)&UHidDevice::execIsValid);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "ReadFeatureReport",(Native)&UHidDevice::execReadFeatureReport);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "ReadInputReport",(Native)&UHidDevice::execReadInputReport);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "SendFeatureReport",(Native)&UHidDevice::execSendFeatureReport);
		FNativeFunctionRegistrar::RegisterFunction(UHidDevice::StaticClass(), "SendOutputReport",(Native)&UHidDevice::execSendOutputReport);
	}
	IMPLEMENT_CLASS(UHidDevice, 574230717);
class UScriptStruct* FHIDDeviceInfo::StaticStruct()
{
	extern BLANKINPUTDEVICEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern BLANKINPUTDEVICEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FHIDDeviceInfo();
		extern BLANKINPUTDEVICEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FHIDDeviceInfo_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHIDDeviceInfo, Z_Construct_UPackage__Script_BlankInputDevicePlugin(), TEXT("HIDDeviceInfo"), sizeof(FHIDDeviceInfo), Get_Z_Construct_UScriptStruct_FHIDDeviceInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHIDDeviceInfo(FHIDDeviceInfo::StaticStruct, TEXT("/Script/BlankInputDevicePlugin"), TEXT("HIDDeviceInfo"), false, nullptr, nullptr);
static struct FScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFHIDDeviceInfo
{
	FScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFHIDDeviceInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HIDDeviceInfo")),new UScriptStruct::TCppStructOps<FHIDDeviceInfo>);
	}
} ScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFHIDDeviceInfo;
	void UHIDFunctionLibrary::StaticRegisterNativesUHIDFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UHIDFunctionLibrary::StaticClass(), "ConvertHexStringToInteger",(Native)&UHIDFunctionLibrary::execConvertHexStringToInteger);
		FNativeFunctionRegistrar::RegisterFunction(UHIDFunctionLibrary::StaticClass(), "EnumerateHIDDevices",(Native)&UHIDFunctionLibrary::execEnumerateHIDDevices);
		FNativeFunctionRegistrar::RegisterFunction(UHIDFunctionLibrary::StaticClass(), "OpenHIDDevice",(Native)&UHIDFunctionLibrary::execOpenHIDDevice);
		FNativeFunctionRegistrar::RegisterFunction(UHIDFunctionLibrary::StaticClass(), "OpenHIDDeviceByPath",(Native)&UHIDFunctionLibrary::execOpenHIDDeviceByPath);
		FNativeFunctionRegistrar::RegisterFunction(UHIDFunctionLibrary::StaticClass(), "ToString",(Native)&UHIDFunctionLibrary::execToString);
	}
	IMPLEMENT_CLASS(UHIDFunctionLibrary, 1488657466);
static class UEnum* LCDDigits_StaticEnum()
{
	extern BLANKINPUTDEVICEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern BLANKINPUTDEVICEPLUGIN_API class UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits();
		Singleton = GetStaticEnum(Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits, Z_Construct_UPackage__Script_BlankInputDevicePlugin(), TEXT("LCDDigits"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_LCDDigits(LCDDigits_StaticEnum, TEXT("/Script/BlankInputDevicePlugin"), TEXT("LCDDigits"), false, nullptr, nullptr);
class UScriptStruct* FSevenSegmentData::StaticStruct()
{
	extern BLANKINPUTDEVICEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern BLANKINPUTDEVICEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSevenSegmentData();
		extern BLANKINPUTDEVICEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FSevenSegmentData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSevenSegmentData, Z_Construct_UPackage__Script_BlankInputDevicePlugin(), TEXT("SevenSegmentData"), sizeof(FSevenSegmentData), Get_Z_Construct_UScriptStruct_FSevenSegmentData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSevenSegmentData(FSevenSegmentData::StaticStruct, TEXT("/Script/BlankInputDevicePlugin"), TEXT("SevenSegmentData"), false, nullptr, nullptr);
static struct FScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFSevenSegmentData
{
	FScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFSevenSegmentData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SevenSegmentData")),new UScriptStruct::TCppStructOps<FSevenSegmentData>);
	}
} ScriptStruct_BlankInputDevicePlugin_StaticRegisterNativesFSevenSegmentData;
	void UStudioBoardFunctions::StaticRegisterNativesUStudioBoardFunctions()
	{
		FNativeFunctionRegistrar::RegisterFunction(UStudioBoardFunctions::StaticClass(), "SetDisplayData",(Native)&UStudioBoardFunctions::execSetDisplayData);
		FNativeFunctionRegistrar::RegisterFunction(UStudioBoardFunctions::StaticClass(), "SetLEDColour",(Native)&UStudioBoardFunctions::execSetLEDColour);
	}
	IMPLEMENT_CLASS(UStudioBoardFunctions, 2565176191);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();

	BLANKINPUTDEVICEPLUGIN_API class UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_CloseDevice();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_GetManufacturerString();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_GetProductString();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_GetSerialNumberString();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_GetStringByIndex();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_IsValid();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_ReadFeatureReport();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_ReadInputReport();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_SendFeatureReport();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHidDevice_SendOutputReport();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UHidDevice_NoRegister();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UHidDevice();
	BLANKINPUTDEVICEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FHIDDeviceInfo();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_ConvertHexStringToInteger();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_EnumerateHIDDevices();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDevice();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDeviceByPath();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_ToString();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UHIDFunctionLibrary_NoRegister();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UHIDFunctionLibrary();
	BLANKINPUTDEVICEPLUGIN_API class UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits();
	BLANKINPUTDEVICEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSevenSegmentData();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UStudioBoardFunctions_SetDisplayData();
	BLANKINPUTDEVICEPLUGIN_API class UFunction* Z_Construct_UFunction_UStudioBoardFunctions_SetLEDColour();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UStudioBoardFunctions_NoRegister();
	BLANKINPUTDEVICEPLUGIN_API class UClass* Z_Construct_UClass_UStudioBoardFunctions();
	BLANKINPUTDEVICEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin();
	UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_BlankInputDevicePlugin();
		extern uint32 Get_Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EHIDReadResult"), 0, Get_Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHIDReadResult"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHRR_ReadOK")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHRR_ReadNone")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHRR_ReadErr")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EHRR_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EHIDReadResult");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult_CRC() { return 2552662704U; }
	UFunction* Z_Construct_UFunction_UHidDevice_CloseDevice()
	{
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloseDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_GetManufacturerString()
	{
		struct HidDevice_eventGetManufacturerString_Parms
		{
			FString ManufacturerString;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetManufacturerString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventGetManufacturerString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventGetManufacturerString_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_ManufacturerString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ManufacturerString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ManufacturerString, HidDevice_eventGetManufacturerString_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_GetProductString()
	{
		struct HidDevice_eventGetProductString_Parms
		{
			FString ProductString;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetProductString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventGetProductString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventGetProductString_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_ProductString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProductString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ProductString, HidDevice_eventGetProductString_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_GetSerialNumberString()
	{
		struct HidDevice_eventGetSerialNumberString_Parms
		{
			FString SerialNumberString;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSerialNumberString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventGetSerialNumberString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventGetSerialNumberString_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_SerialNumberString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SerialNumberString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SerialNumberString, HidDevice_eventGetSerialNumberString_Parms), 0x0010000000000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_GetStringByIndex()
	{
		struct HidDevice_eventGetStringByIndex_Parms
		{
			int32 Index;
			FString IndexedString;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStringByIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventGetStringByIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventGetStringByIndex_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_IndexedString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IndexedString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(IndexedString, HidDevice_eventGetStringByIndex_Parms), 0x0010000000000180);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Index, HidDevice_eventGetStringByIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_IsValid()
	{
		struct HidDevice_eventIsValid_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HidDevice_eventIsValid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HidDevice_eventIsValid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HidDevice_eventIsValid_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HidDevice_eventIsValid_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_ReadFeatureReport()
	{
		struct HidDevice_eventReadFeatureReport_Parms
		{
			TArray<uint8> ReportBuffer;
			uint8 ReportID;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReadFeatureReport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventReadFeatureReport_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventReadFeatureReport_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_ReportID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReportID"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReportID, HidDevice_eventReadFeatureReport_Parms), 0x0010000000000080);
			UProperty* NewProp_ReportBuffer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReportBuffer"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReportBuffer, HidDevice_eventReadFeatureReport_Parms), 0x0010000000000180);
			UProperty* NewProp_ReportBuffer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReportBuffer, TEXT("ReportBuffer"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ReportID"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_ReadInputReport()
	{
		struct HidDevice_eventReadInputReport_Parms
		{
			TArray<uint8> ReportBuffer;
			TEnumAsByte<EHIDReadResult> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReadInputReport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(HidDevice_eventReadInputReport_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, HidDevice_eventReadInputReport_Parms), 0x0010000000000580, Z_Construct_UEnum_BlankInputDevicePlugin_EHIDReadResult());
			UProperty* NewProp_ReportBuffer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReportBuffer"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReportBuffer, HidDevice_eventReadInputReport_Parms), 0x0010000000000180);
			UProperty* NewProp_ReportBuffer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReportBuffer, TEXT("ReportBuffer"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_SendFeatureReport()
	{
		struct HidDevice_eventSendFeatureReport_Parms
		{
			TArray<uint8> Data;
			int32 FeatureNumber;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendFeatureReport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HidDevice_eventSendFeatureReport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, HidDevice_eventSendFeatureReport_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, HidDevice_eventSendFeatureReport_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, HidDevice_eventSendFeatureReport_Parms), sizeof(bool), true);
			UProperty* NewProp_FeatureNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FeatureNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(FeatureNumber, HidDevice_eventSendFeatureReport_Parms), 0x0010000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Data, HidDevice_eventSendFeatureReport_Parms), 0x0010000000000080);
			UProperty* NewProp_Data_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Data, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHidDevice_SendOutputReport()
	{
		struct HidDevice_eventSendOutputReport_Parms
		{
			TArray<uint8> Data;
			uint8 ReportNumber;
		};
		UObject* Outer=Z_Construct_UClass_UHidDevice();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SendOutputReport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HidDevice_eventSendOutputReport_Parms));
			UProperty* NewProp_ReportNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReportNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReportNumber, HidDevice_eventSendOutputReport_Parms), 0x0010000000000080);
			UProperty* NewProp_Data = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Data, HidDevice_eventSendOutputReport_Parms), 0x0010000000000080);
			UProperty* NewProp_Data_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Data, TEXT("Data"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHidDevice_NoRegister()
	{
		return UHidDevice::StaticClass();
	}
	UClass* Z_Construct_UClass_UHidDevice()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_BlankInputDevicePlugin();
			OuterClass = UHidDevice::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_CloseDevice());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_GetManufacturerString());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_GetProductString());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_GetSerialNumberString());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_GetStringByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_IsValid());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_ReadFeatureReport());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_ReadInputReport());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_SendFeatureReport());
				OuterClass->LinkChild(Z_Construct_UFunction_UHidDevice_SendOutputReport());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_CloseDevice(), "CloseDevice"); // 654003921
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_GetManufacturerString(), "GetManufacturerString"); // 3974944183
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_GetProductString(), "GetProductString"); // 1515077940
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_GetSerialNumberString(), "GetSerialNumberString"); // 1100994701
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_GetStringByIndex(), "GetStringByIndex"); // 2627626622
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_IsValid(), "IsValid"); // 2209704146
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_ReadFeatureReport(), "ReadFeatureReport"); // 1879058361
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_ReadInputReport(), "ReadInputReport"); // 2524719686
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_SendFeatureReport(), "SendFeatureReport"); // 1660400536
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHidDevice_SendOutputReport(), "SendOutputReport"); // 3046010202
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDevice.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHidDevice(Z_Construct_UClass_UHidDevice, &UHidDevice::StaticClass, TEXT("UHidDevice"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHidDevice);
	UScriptStruct* Z_Construct_UScriptStruct_FHIDDeviceInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_BlankInputDevicePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FHIDDeviceInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("HIDDeviceInfo"), sizeof(FHIDDeviceInfo), Get_Z_Construct_UScriptStruct_FHIDDeviceInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HIDDeviceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FHIDDeviceInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_InterfaceNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InterfaceNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InterfaceNumber, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_Usage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Usage"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Usage, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_UsagePage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UsagePage"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(UsagePage, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_ProductString = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProductString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ProductString, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_ManufacturerString = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ManufacturerString"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ManufacturerString, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_ReleaseNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReleaseNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReleaseNumber, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_SerialNumber = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SerialNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SerialNumber, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_ProductID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProductID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProductID, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_VendorID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VendorID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VendorID, FHIDDeviceInfo), 0x0010000000000014);
			UProperty* NewProp_DevicePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DevicePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(DevicePath, FHIDDeviceInfo), 0x0010000000000014);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_InterfaceNumber, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_InterfaceNumber, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_Usage, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_Usage, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_UsagePage, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_UsagePage, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_ProductString, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_ProductString, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_ManufacturerString, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_ManufacturerString, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_ReleaseNumber, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_ReleaseNumber, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_SerialNumber, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_SerialNumber, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_ProductID, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_ProductID, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_VendorID, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_VendorID, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
			MetaData->SetValue(NewProp_DevicePath, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(NewProp_DevicePath, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HidDeviceInfo.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHIDDeviceInfo_CRC() { return 2996653324U; }
	UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_ConvertHexStringToInteger()
	{
		struct HIDFunctionLibrary_eventConvertHexStringToInteger_Parms
		{
			FString InInteger;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHIDFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvertHexStringToInteger"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(HIDFunctionLibrary_eventConvertHexStringToInteger_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, HIDFunctionLibrary_eventConvertHexStringToInteger_Parms), 0x0010000000000580);
			UProperty* NewProp_InInteger = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InInteger"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InInteger, HIDFunctionLibrary_eventConvertHexStringToInteger_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_EnumerateHIDDevices()
	{
		struct HIDFunctionLibrary_eventEnumerateHIDDevices_Parms
		{
			TArray<FHIDDeviceInfo> DeviceInfo;
			int32 VendorID;
			int32 ProductID;
		};
		UObject* Outer=Z_Construct_UClass_UHIDFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnumerateHIDDevices"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(HIDFunctionLibrary_eventEnumerateHIDDevices_Parms));
			UProperty* NewProp_ProductID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProductID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProductID, HIDFunctionLibrary_eventEnumerateHIDDevices_Parms), 0x0010000000000080);
			UProperty* NewProp_VendorID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VendorID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VendorID, HIDFunctionLibrary_eventEnumerateHIDDevices_Parms), 0x0010000000000080);
			UProperty* NewProp_DeviceInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(DeviceInfo, HIDFunctionLibrary_eventEnumerateHIDDevices_Parms), 0x0010000000000180);
			UProperty* NewProp_DeviceInfo_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DeviceInfo, TEXT("DeviceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FHIDDeviceInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ProductID"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_VendorID"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDevice()
	{
		struct HIDFunctionLibrary_eventOpenHIDDevice_Parms
		{
			int32 VendorID;
			int32 ProductID;
			FString SerialNumber;
			UHidDevice* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHIDFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenHIDDevice"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HIDFunctionLibrary_eventOpenHIDDevice_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, HIDFunctionLibrary_eventOpenHIDDevice_Parms), 0x0010000000000580, Z_Construct_UClass_UHidDevice_NoRegister());
			UProperty* NewProp_SerialNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SerialNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SerialNumber, HIDFunctionLibrary_eventOpenHIDDevice_Parms), 0x0010000000000080);
			UProperty* NewProp_ProductID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProductID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ProductID, HIDFunctionLibrary_eventOpenHIDDevice_Parms), 0x0010000000000080);
			UProperty* NewProp_VendorID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("VendorID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(VendorID, HIDFunctionLibrary_eventOpenHIDDevice_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDeviceByPath()
	{
		struct HIDFunctionLibrary_eventOpenHIDDeviceByPath_Parms
		{
			FString Path;
			UHidDevice* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHIDFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenHIDDeviceByPath"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(HIDFunctionLibrary_eventOpenHIDDeviceByPath_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, HIDFunctionLibrary_eventOpenHIDDeviceByPath_Parms), 0x0010000000000580, Z_Construct_UClass_UHidDevice_NoRegister());
			UProperty* NewProp_Path = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Path"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Path, HIDFunctionLibrary_eventOpenHIDDeviceByPath_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHIDFunctionLibrary_ToString()
	{
		struct HIDFunctionLibrary_eventToString_Parms
		{
			FHIDDeviceInfo DeviceInfo;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHIDFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(HIDFunctionLibrary_eventToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, HIDFunctionLibrary_eventToString_Parms), 0x0010000000000580);
			UProperty* NewProp_DeviceInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DeviceInfo, HIDFunctionLibrary_eventToString_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FHIDDeviceInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("HID"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHIDFunctionLibrary_NoRegister()
	{
		return UHIDFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UHIDFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_BlankInputDevicePlugin();
			OuterClass = UHIDFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHIDFunctionLibrary_ConvertHexStringToInteger());
				OuterClass->LinkChild(Z_Construct_UFunction_UHIDFunctionLibrary_EnumerateHIDDevices());
				OuterClass->LinkChild(Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDevice());
				OuterClass->LinkChild(Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDeviceByPath());
				OuterClass->LinkChild(Z_Construct_UFunction_UHIDFunctionLibrary_ToString());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHIDFunctionLibrary_ConvertHexStringToInteger(), "ConvertHexStringToInteger"); // 16214950
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHIDFunctionLibrary_EnumerateHIDDevices(), "EnumerateHIDDevices"); // 919581480
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDevice(), "OpenHIDDevice"); // 2597054403
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHIDFunctionLibrary_OpenHIDDeviceByPath(), "OpenHIDDeviceByPath"); // 3058484167
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UHIDFunctionLibrary_ToString(), "ToString"); // 2521100968
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/HIDFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHIDFunctionLibrary(Z_Construct_UClass_UHIDFunctionLibrary, &UHIDFunctionLibrary::StaticClass, TEXT("UHIDFunctionLibrary"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHIDFunctionLibrary);
	UEnum* Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_BlankInputDevicePlugin();
		extern uint32 Get_Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("LCDDigits"), 0, Get_Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LCDDigits"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_0")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_1")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_2")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_3")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_4")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_5")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_6")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_7")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_8")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_9")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_A")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_B")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_C")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_D")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_E")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_F")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_G")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_H")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_I")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_J")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_L")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_N")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_O")), 22));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_P")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_Q")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_R")), 25));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_S")), 26));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_U")), 27));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_Y")), 28));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Digit_MAX")), 29));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("LCDDigits");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits_CRC() { return 1603765547U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSevenSegmentData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_BlankInputDevicePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FSevenSegmentData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SevenSegmentData"), sizeof(FSevenSegmentData), Get_Z_Construct_UScriptStruct_FSevenSegmentData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SevenSegmentData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSevenSegmentData>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot8, FSevenSegmentData, bool);
			UProperty* NewProp_Dot8 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot8"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot8, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot8, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot7, FSevenSegmentData, bool);
			UProperty* NewProp_Dot7 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot7"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot7, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot7, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot6, FSevenSegmentData, bool);
			UProperty* NewProp_Dot6 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot6"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot6, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot6, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot5, FSevenSegmentData, bool);
			UProperty* NewProp_Dot5 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot5"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot5, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot5, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot4, FSevenSegmentData, bool);
			UProperty* NewProp_Dot4 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot4"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot4, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot4, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot3, FSevenSegmentData, bool);
			UProperty* NewProp_Dot3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot3"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot3, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot3, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot2, FSevenSegmentData, bool);
			UProperty* NewProp_Dot2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot2"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot2, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot2, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Dot1, FSevenSegmentData, bool);
			UProperty* NewProp_Dot1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Dot1"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Dot1, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Dot1, FSevenSegmentData), sizeof(bool), true);
			UProperty* NewProp_Digit4 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Digit4"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Digit4, FSevenSegmentData), 0x0010000000000005, Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits());
			UProperty* NewProp_Digit3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Digit3"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Digit3, FSevenSegmentData), 0x0010000000000005, Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits());
			UProperty* NewProp_Digit2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Digit2"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Digit2, FSevenSegmentData), 0x0010000000000005, Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits());
			UProperty* NewProp_Digit1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Digit1"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Digit1, FSevenSegmentData), 0x0010000000000005, Z_Construct_UEnum_BlankInputDevicePlugin_LCDDigits());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableDigit4, FSevenSegmentData, bool);
			UProperty* NewProp_EnableDigit4 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnableDigit4"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableDigit4, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(EnableDigit4, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableDigit3, FSevenSegmentData, bool);
			UProperty* NewProp_EnableDigit3 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnableDigit3"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableDigit3, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(EnableDigit3, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableDigit2, FSevenSegmentData, bool);
			UProperty* NewProp_EnableDigit2 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnableDigit2"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableDigit2, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(EnableDigit2, FSevenSegmentData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(EnableDigit1, FSevenSegmentData, bool);
			UProperty* NewProp_EnableDigit1 = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnableDigit1"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(EnableDigit1, FSevenSegmentData), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(EnableDigit1, FSevenSegmentData), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("0 a+b+c+d+e+f\n1 b+c\n2 a+b+G+e+d\n3 a+b+g+c+d\n4 f+g+b+c\n5 a+f+g+c+d\n6 a+f+g+c+d+e\n7 a+b+c\n8 a+b+c+d+e+f+g\n9 a+b+c+f+g\nA a+b+c+e+f+g\nb c+d+e+f+g\nC a+d+e+f\nd b+c+d+e+g\nE a+b+c+d+e+f+g\nF a+d+e+f+g\nG a+b+c+d+f+g\nH b+c+e+f+g\nI c\nJ b+c+d\nL d+e+f\nN c+e+g\n0 a+b+c+d+e+f\nP a+b+e+f+g\nQ a+b+c+f+g\nr e+g\nS a+c+d+f+g\nU b+c+d+e+f\nY b+c+d+f+g\n\n\norientation:\nvertical\na swap d\ne swap f\nc swap b\nhorizontal\nf swap b\nc swap e"));
			MetaData->SetValue(NewProp_Dot8, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot8, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot7, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot7, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot6, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot6, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot5, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot5, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot4, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot4, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot3, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot3, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot2, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot2, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Dot1, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Dot1, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Digit4, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Digit4, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Digit3, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Digit3, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Digit2, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Digit2, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_Digit1, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_Digit1, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_EnableDigit4, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_EnableDigit4, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_EnableDigit3, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_EnableDigit3, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_EnableDigit2, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_EnableDigit2, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
			MetaData->SetValue(NewProp_EnableDigit1, TEXT("Category"), TEXT("SevenSegmentData"));
			MetaData->SetValue(NewProp_EnableDigit1, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSevenSegmentData_CRC() { return 3107372660U; }
	UFunction* Z_Construct_UFunction_UStudioBoardFunctions_SetDisplayData()
	{
		struct StudioBoardFunctions_eventSetDisplayData_Parms
		{
			UHidDevice* Device;
			FSevenSegmentData SevenSegmentData;
		};
		UObject* Outer=Z_Construct_UClass_UStudioBoardFunctions();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDisplayData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(StudioBoardFunctions_eventSetDisplayData_Parms));
			UProperty* NewProp_SevenSegmentData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SevenSegmentData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SevenSegmentData, StudioBoardFunctions_eventSetDisplayData_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSevenSegmentData());
			UProperty* NewProp_Device = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Device"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Device, StudioBoardFunctions_eventSetDisplayData_Parms), 0x0010000000000080, Z_Construct_UClass_UHidDevice_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Display"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UStudioBoardFunctions_SetLEDColour()
	{
		struct StudioBoardFunctions_eventSetLEDColour_Parms
		{
			UHidDevice* Device;
			FColor LED1Colour;
			FColor LED2Colour;
			FColor LED3Colour;
			FColor LED4Colour;
		};
		UObject* Outer=Z_Construct_UClass_UStudioBoardFunctions();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLEDColour"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(StudioBoardFunctions_eventSetLEDColour_Parms));
			UProperty* NewProp_LED4Colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LED4Colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LED4Colour, StudioBoardFunctions_eventSetLEDColour_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_LED3Colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LED3Colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LED3Colour, StudioBoardFunctions_eventSetLEDColour_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_LED2Colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LED2Colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LED2Colour, StudioBoardFunctions_eventSetLEDColour_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_LED1Colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LED1Colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LED1Colour, StudioBoardFunctions_eventSetLEDColour_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FColor());
			UProperty* NewProp_Device = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Device"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Device, StudioBoardFunctions_eventSetLEDColour_Parms), 0x0010000000000080, Z_Construct_UClass_UHidDevice_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LEDs"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UStudioBoardFunctions_NoRegister()
	{
		return UStudioBoardFunctions::StaticClass();
	}
	UClass* Z_Construct_UClass_UStudioBoardFunctions()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_BlankInputDevicePlugin();
			OuterClass = UStudioBoardFunctions::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UStudioBoardFunctions_SetDisplayData());
				OuterClass->LinkChild(Z_Construct_UFunction_UStudioBoardFunctions_SetLEDColour());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStudioBoardFunctions_SetDisplayData(), "SetDisplayData"); // 35418076
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UStudioBoardFunctions_SetLEDColour(), "SetLEDColour"); // 2388416538
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("BlankInputDevicePlugin/Public/StudioBoard/StudioBoardFunctions.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStudioBoardFunctions(Z_Construct_UClass_UStudioBoardFunctions, &UStudioBoardFunctions::StaticClass, TEXT("UStudioBoardFunctions"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStudioBoardFunctions);
	UPackage* Z_Construct_UPackage__Script_BlankInputDevicePlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/BlankInputDevicePlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000080);
			FGuid Guid;
			Guid.A = 0xD68987F9;
			Guid.B = 0xEF44D8B8;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
